
user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - [$host:$request_uri] - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    upstream servers {
        # -------------策略-------------
        # 不配置默认为round-robin，轮询策略，没有指令。
        # least_conn; #最少活动连接 策略
        # ip_hash; #相同ip将分配到同一节点，用于解决session问题。后端节点使用集中session管理的话，不必使用ip_hash
        # hash $request_uri; #根据指定的参数hash确定节点。节点中有缓存时可以使用
        
        # -------------权重-------------
        # 可以添加权重weight参数，在每个节点配置即可，权重越大分配到的请求越多
        # 最新版已经支持weight应用在 ip_hash和least_conn策略下。

        # -------------其他参数-------------
        # max_conns #默认0，不限制。限制节点最大连接数。
        # down 指定节点下线，不参与负载均衡
        # backup 指定一个节点，当其他节点都失败或繁忙时，分配到该节点。

        # -------------健康检查-------------
        # max_fails 默认=1，表示失败次数，0表示不计数。
        # fail_timeout 默认=10，在指定时间内失败次数超过max_fails时，等待下一个周期fail_timeout后，再次请求。
        # 请求是失败的状态判定由proxy_next_upstream配置,默认为error,timeout。proxy可替换为fastcgi,grpc等。
        # 补充：当一个节点请求失败后，会转发到下一个节点。
        server nginx_1 weight=1 max_conns=1;
        server nginx_2 weight=2 max_fails=3 fail_timeout=15s;
    }

    include /etc/nginx/conf.d/*.conf;
}
